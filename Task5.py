'''
Задание
1) Взять код, подготовленный ранее
2) Провести его ревизию на соответствие PEP 8
3) Сравнить было-стало
4) Объяснить что стало лучше или хуже с т.з. читаемости кода и почему.
'''

# Возъмем код предыдущего задания.
# Комментарии будем стараться делать в соответствии с PEP8 - т.е. с тем же отступом.
# Комментарий выше не соответствует PEP8, т.к. превышает 79 символов
# Читаемость при ограничении строки в 79 символов чуть получше
# Но для современных мониторов ограничение выглядит странным

# Импорт в начале файла, в соответствии с PEP8, после комментариев
from pymorphy2 import MorphAnalyzer

# Классы и функции отделяем двумя пустыми строками. Улучшается читаемость.
# Имя класса соответствует PEP8.


class Comparator:
    # Имя функции соответствует PEP8.
    # Методы разделяются пустой строкой, улучшается читаемость
    # Для улучшения восприятия добавим docstring в соответсвии с PEP8

    def __init__(self, s1, s2):
        '''Инициализация класса'''
        self.s1 = s1
        self.s2 = s2

    # Имя функции соответствует PEP8.
    def compare(self, s1, s2):
        '''Метод сравнивает строки и возвращает коэффициент похожести.
        В качестве аргументов метод ожидает две строки.

        '''
        ngrams = [s1[i:i+3] for i in range(len(s1))]
        count = 0
        for ngram in ngrams:
            count += s2.count(ngram)
        return count / max(len(s1), len(s2))

    # Имя функции соответствует PEP8.
    def normalize_strings(self, s1, s2):
        '''Метод возвращает нормализованные значения строк
        В качестве аргументов метод ожидает две строки,
        при нормализации используется модуль MorphAnalyzer

        '''
        ma = MorphAnalyzer()
        nf_s1 = ma.parse(s1)[0].normal_form
        nf_s2 = ma.parse(s2)[0].normal_form
        # Возвращаем кортеж нормализованных значений слов
        return nf_s1, nf_s2

    def normalized_compare(self, s1, s2):
        '''Метод нормализует и сравнивает строки, возвращает коэффициент похожести
        В качестве аргументов метод ожидает две строки.
        '''
        return self.compare(*self.normalize_strings(s1, s2))


if __name__ == '__main__':
    s1 = 'арбузов'
    s2 = 'арбуза'
    # После запятых при перечислении ставим пробелы. Улучшается читаемость
    melons = Comparator(s1, s2)
    print(melons.normalized_compare(s1, s2))

# В конце кода оставляем пустую строку.
